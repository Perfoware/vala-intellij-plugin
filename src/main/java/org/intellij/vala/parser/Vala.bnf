{
  //classHeader="license.txt"
  generate=[names="long"]

  parserClass="org.intellij.vala.parser.ValaParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

  implements="org.intellij.vala.psi.ValaPsiElement"
  extends="org.intellij.vala.psi.impl.ValaPsiElementImpl"

  psiClassPrefix="Vala"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.vala.psi"
  psiImplPackage="org.intellij.vala.psi.impl"
  psiImplUtilClass="org.intellij.vala.psi.impl.ValaPsiImplUtil"

  elementTypeHolderClass="org.intellij.vala.psi.ValaTypes"
  elementTypeFactory="org.intellij.vala.parser.ValaParserDefinition.createElementType"
  tokenTypeClass="org.intellij.vala.psi.ValaTokenType"

  tokens = [
    OP_EQ="=="
    OP_ASGN="="
    OP_ADD_ASGN="+="
    OP_SUB_ASGN="-="
    OP_MUL_ASGN="*="
    OP_DIV_ASGN="/="
    OP_OR_ASGN="|="
    OP_MOD_ASGN="%="
    OP_XOR_ASGN="^="
    OP_AND_ASGN="&="
    OP_LSHIFT_ASGN="<<="
    OP_RSHIFT_ASGN=">>="
    OP_BIT_OR="|"
    OP_ADD="+"
    OP_SUB="-"
    OP_MUL="*"
    OP_AND="&&"
    OP_OR="||"
    OP_NOT="!"
    OP_COND="?"
    OP_COALESCE="??"
    OP_BIN_NOT="~"
    OP_REF="&"
    OP_LAMBDA="=>"
    OP_NEG="!="
    OP_LT="<"
    OP_GT=">"
    OP_LE="<="
    OP_GE=">="
    OP_DIV="/"
    OP_MOD="%"
    OP_INC="++"
    OP_DEC="--"
    OP_LSHIFT="<<"
    OP_RSHIFT=">>"
    OP_XOR="^"
    COMA=","
    SEMICOLON=";"
    COLON=":"
    LEFT_CURLY="{"
    RIGHT_CURLY="}"
    LEFT_SQUARE="["
    RIGHT_SQUARE="]"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    GLOBAL="global::"
    KEY_TRUE="true"
    KEY_FALSE="false"
    KEY_NULL="null"
    KEY_IS="is"
    KEY_AS="as"
    KEY_NAMESPACE="namespace"
    KEY_USING="using"
    KEY_CLASS="class"
    KEY_REF="ref"
    KEY_PROTECTED="protected"
    KEY_PUBLIC="public"
    KEY_INTERNAL="internal"
    KEY_PRIVATE="private"
    KEY_THROWS="throws"
    KEY_IF="if"
    KEY_ELSE="else"
    KEY_SWITCH="switch"
    KEY_CASE="case"
    KEY_DEFAULT="default"
    KEY_DO="do"
    KEY_WHILE="while"
    KEY_FOR="for"
    KEY_FOREACH="foreach"
    KEY_VAR="var"
    KEY_IN="in"
    KEY_BREAK="break"
    KEY_CONTINUE="continue"
    KEY_RETURN="return"
    KEY_YIELD="yield"
    KEY_TRY="try"
    KEY_THROW="throw"
    KEY_FINALLY="finally"
    KEY_CATCH="catch"
    KEY_LOCK="lock"
    KEY_DELETE="delete"
    KEY_BASE="base"
    KEY_THIS="this"
    KEY_NEW="new"
    KEY_OUT="out"
    KEY_INTERFACE="interface"
    KEY_STRUCT="struct"
    KEY_PARAMS="params"
    KEY_ENSURES="ensures"
    KEY_REQUIRES="requires"
    KEY_ASYNC="async"
    KEY_INLINE="inline"
    KEY_ABSTRACT="abstract"
    KEY_EXTERN="extern"
    KEY_VIRTUAL="virtual"
    KEY_OVERRIDE="override"
    KEY_CONST="const"
    KEY_GET="get"
    KEY_SET="set"
    KEY_CONSTRUCT="construct"
    KEY_SIGNAL="signal"
    KEY_STATIC="static"
    KEY_TYPEOF="typeof"
    KEY_SIZEOF="sizeof"
    KEY_OWNED="owned"
    KEY_DYNAMIC="dynamic"
    KEY_UNOWNED="unowned"
    KEY_WEAK="weak"
    KEY_ERRORDOMAIN="errordomain"
    KEY_ENUM="enum"
    TYPE_VOID="void"
    TYPE_STRING="string"
    TYPE_CHAR="char"
    TYPE_UCHAR="uchar"
    TYPE_SHORT="short"
    TYPE_USHORT="ushort"
    TYPE_INT="int"
    TYPE_UINT="uint"
    TYPE_LONG="long"
    TYPE_ULONG="ulong"
    TYPE_SIZE_T="size_t"
    TYPE_SSIZE_T="ssize_t"
    TYPE_INT8="int8"
    TYPE_UINT8="uint8"
    TYPE_INT16="int16"
    TYPE_UINT16="uint16"
    TYPE_INT32="int32"
    TYPE_UINT32="uint32"
    TYPE_INT64="int64"
    TYPE_UINT64="uint64"
    TYPE_UNICHAR="unichar"
    TYPE_FLOAT="float"
    TYPE_DOUBLE="double"
    TYPE_BOOL="bool"
    CAST_OWNED="(owned)"
    CAST_VOID="(void)"
    CAST_DYNAMIC="(dynamic)"
    CAST_NON_NULL="(!)"
    QUOTE='"'
    TEMPLATE_STRING_OPEN='@'
    VARARGS="..."
    DOT="."
    ARROW="->"

    identifier="regexp:[A-Za-z_][A-Za-z0-9_]*"
    verbatim_string_literal="regexp:\"\"\"(.|\n|\r)*\"\"\""
    string_literal="regexp:\"([^\"\\]|\\\"|\\\'|\\)*\""
    real_literal="regexp:-?\d+\.\d+"
    integer_literal="regexp:-?\d+"
    line_comment="regexp://.*"
    block_comment="regexp:/\*(.|\n)*\*/"
    character_literal="regexp:\'[A-Za-z0-9]\'"

  ]

  extends("expression")=argument
  extends(".*expression")=expression
  extends("method_call|member_access|pointer_member_access|element_access")=chain_access_part
  extends(".*statement|local_variable_declarations|block")=statement
  extends("namespace_declaration|interface_declaration|struct_declaration|enum_declaration|errordomain_declaration|method_declaration|field_declaration|constant_declaration")=namespace_member
  implements("symbol_part|member_part") = "com.intellij.psi.PsiNamedElement"
  implements("class_declaration|struct_declaration|interface_declaration") = "org.intellij.vala.psi.ValaTypeWithSuperTypes, org.intellij.vala.psi.ValaDeclarationContainer, com.intellij.psi.PsiNamedElement"
  implements("namespace_declaration") = "org.intellij.vala.psi.ValaDeclaration, org.intellij.vala.psi.ValaDeclarationContainer"
  implements("method_declaration") = "org.intellij.vala.psi.ValaDeclaration, com.intellij.psi.PsiNamedElement, org.intellij.vala.psi.HasTypeDescriptor"
  implements("creation_method_declaration") = "org.intellij.vala.psi.ValaDeclaration, com.intellij.psi.PsiNamedElement"
  implements("field_declaration") = "org.intellij.vala.psi.ValaDeclaration, com.intellij.psi.PsiNamedElement, org.intellij.vala.psi.HasTypeDescriptor"
  implements("local_variable|parameter|simple_name") = "com.intellij.psi.PsiNamedElement, org.intellij.vala.psi.HasTypeDescriptor"
  implements("method_call|literal|chain_access_part")="org.intellij.vala.psi.HasTypeDescriptor"
  implements("relational_operator|equality_operator|shift_operator|additive_operator|multiplicative_operator")="org.intellij.vala.psi.ValaBinaryOperator"
}

vala_module ::= using_directive * namespace_member *
symbol ::= symbol_part ( "." symbol_part )*
symbol_part ::= ( "global::" identifier ) | identifier {methods=[getName setName getReference]}

built_in_type ::= integral_type | floating_point_type | "bool" | "string" | "void"
private integral_type ::= "char" | "uchar" | "short" | "ushort" | "long" | "ulong" | "size_t" | "ssize_t" | int_type
private floating_point_type ::= "float" | "double"
private int_type ::= "int" | "uint" | "int8" | "uint8" | "int16" | "uint16" | "int32" | "uint32" | "int64" | "uint64"

using_directive ::= "using" symbol ( "," symbol )* ";"
namespace_member ::= attributes?
                     ( namespace_declaration |
                       class_declaration |
                       interface_declaration |
                       struct_declaration |
                       enum_declaration |
                       errordomain_declaration |
                       method_declaration |
                       field_declaration |
                       constant_declaration ) {methods=[getNamespace]}

attributes ::= attribute*
attribute ::= "[" identifier ( attribute_arguments )? "]"
attribute_arguments ::= "(" attribute_argument ( "," attribute_argument )* ")"
attribute_argument ::= identifier "=" expression

access_modifier ::= "private" | "protected" | "public" | "internal"

assignment_operator ::= "=" | "+=" | "-=" | "|=" | "&=" | "^=" | "/=" | "*=" | "%=" | "<<=" | ">>="
relational_operator ::= "<" | "<=" | ">" | ">="
additive_operator ::= "+" | "-"
multiplicative_operator ::= "*" | "/" | "%"
equality_operator ::= "==" | "!="
shift_operator ::= "<<" | ">>"
expression ::= lambda_expression | ( conditional_expression ( assignment_operator expression )? )
conditional_expression ::= coalescing_expression ( "?" expression ":" expression )?
coalescing_expression ::= conditional_or_expression ( "??" coalescing_expression )?
conditional_or_expression ::= conditional_and_expression ( "||" conditional_and_expression )*
conditional_and_expression ::= in_expression ( "&&" in_expression )*
in_expression ::= inclusive_or_expression ( "in" inclusive_or_expression )?
inclusive_or_expression ::= exclusive_or_expression ( "|" exclusive_or_expression )*
exclusive_or_expression ::= and_expression ( "^" and_expression )*
and_expression ::= equality_expression ( "&" equality_expression )*
equality_expression ::= relational_expression ( equality_operator relational_expression )*
relational_expression ::= shift_expression ( (relational_operator shift_expression ) |( "is" type ) | ( "as" type ) )*
shift_expression ::= additive_expression ( shift_operator additive_expression )*
additive_expression ::= multiplicative_expression ( additive_operator multiplicative_expression )*
multiplicative_expression ::= unary_expression (multiplicative_operator unary_expression )*
unary_expression ::= ( unary_operator unary_expression ) |
                     ( "(" ( "owned" | "void" | "dynamic" | "!" | type ) ")" unary_expression ) |
                     primary_expression
primary_expression ::= ( literal | initializer | tuple | template | this_access | base_access |
                       object_or_array_creation_expression | yield_expression | sizeof_expression | typeof_expression |
                       simple_name | built_in_type ) chain_access_part*

chain_access_part ::= member_access | pointer_member_access | method_call | element_access | post_increment_expression | post_decrement_expression {methods=[getPrevious getTypeDescriptor]}

element_access ::= "[" array_size "]"
sizeof_expression ::= "sizeof" "(" type ")" {pin=1}
typeof_expression ::= "typeof" "(" type ")" {pin=1}
simple_name ::= ( "global::" identifier | identifier ) type_arguments? {methods=[getReference getName setName getTypeDescriptor]}

literal ::= "true" | "false" | "null" | integer_literal | real_literal | character_literal | string_literal | verbatim_string_literal | template_string_literal {methods=[getTypeDescriptor]}
template_string_literal ::= "@" string_literal
member_access ::= "." member {methods=[getTypeDescriptor]}
pointer_member_access ::= "->" member {methods=[getTypeDescriptor]}
member ::= member_part ( "." member_part )*
member_part ::= ( "global::" identifier | identifier ) type_arguments? {methods=[getName setName getReference getPrevious]}
template ::= '@' '"' ( expression "," )* '"'

// get_unary_operator
unary_operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "*" | "&" | "(owned)" | "(void)" | "(dynamic)" | "(!)"
post_increment_expression ::= "++";
post_decrement_expression ::= "--";

lambda_expression_params ::= identifier | ( "(" ( identifier ( "," identifier )* )? ")" )
lambda_expression ::= lambda_expression_params "=>" lambda_expression_body
lambda_expression_body ::= expression | block

yield_expression ::= "yield" ( base_access "." )? member method_call
method_call ::= "(" arguments? ")" object_initializer? {methods=[getMethodDeclaration getTypeDescriptor]}

member_declaration_modifiers ::= member_declaration_modifier ( " " member_declaration_modifier )*
member_declaration_modifier ::= "async" | "class" | "extern" | "inline" | "static" | "abstract" | "virtual" | "override" | "new"

constructor_declaration ::= constructor_declaration_modifiers? "construct" block {pin=2}
constructor_declaration_modifiers ::= constructor_declaration_modifier ( " " constructor_declaration_modifier )*
constructor_declaration_modifier ::= "async" | "class" | "extern" | "inline" | "static" | "abstract" | "virtual" | "override"

destructor_declaration ::= constructor_declaration_modifiers? "~" identifier "(" ")" block {pin=3}

class_declaration ::= access_modifier? type_declaration_modifiers? "class" symbol type_arguments? ( ":" base_types)? class_body
{
    methods=[getName setName getMethodDeclarations getNamespaceMemberList toString getDeclarations getQName getSuperTypeDeclarations]
    pin=3
    stubClass="org.intellij.vala.psi.stub.ValaClassDeclarationStub"
}

base_types ::= type ( "," type )*

class_body ::= "{"  class_member* "}";
class_member ::= attributes?
                 ( class_declaration |
                   struct_declaration |
                   enum_declaration |
                   delegate_declaration |
                   method_declaration |
                   signal_declaration |
                   field_declaration |
                   constant_declaration |
                   property_declaration |
                   constructor_declaration |
                   creation_method_declaration |
                   destructor_declaration )
{recoverWhile=class_member_recovery}
private class_member_recovery ::= !("~"|";"|"interface"|"class"|"enum"|access_modifier|"["|"}"|identifier|built_in_type)

type_declaration_modifiers ::= type_declaration_modifier ( " " type_declaration_modifier )*
type_declaration_modifier ::= "abstract" | "extern" | "static"
enum_declaration ::= access_modifier? type_declaration_modifiers? "enum" symbol
                     "{" enumvalues ( ";" ( method_declaration | constant_declaration )* )? "}" {pin=3}
enumvalues ::= enumvalue ( "," enumvalue )*
enumvalue ::= attributes? identifier ( "=" expression )?
errordomain_declaration ::= access_modifier? type_declaration_modifiers? "errordomain" symbol
                            "{" errorcodes ( ";" method_declaration* )? "}" {pin=3}
errorcodes ::= errorcode ( "," errorcode )*
errorcode ::= attributes? identifier ("=" expression)?

interface_declaration ::= access_modifier? type_declaration_modifiers? "interface" symbol type_parameters?
                          (":" base_types)? "{" interface_member* "}" {pin=3 methods=[getSuperTypeDeclarations getQName getDeclarations getName setName]}
interface_member ::= attributes?
                     ( class_declaration |
                       struct_declaration |
                       enum_declaration |
                       delegate_declaration |
                       method_declaration |
                       signal_declaration |
                       field_declaration |
                       constant_declaration |
                       property_declaration )

namespace_declaration ::= "namespace" symbol "{" using_directive* namespace_member* "}" {methods=[getDeclarations getQName] pin=1}
struct_declaration ::= access_modifier? type_declaration_modifiers? "struct" symbol ( ":" base_types )? "{" struct_member* "}" {pin=3 methods=[getSuperTypeDeclarations getQName getDeclarations getName setName]}
struct_member ::= attributes? ( method_declaration | field_declaration | constant_declaration | property_declaration )

creation_method_declaration ::= access_modifier? constructor_declaration_modifiers? symbol
                                "(" parameters? ")" throws_declaration? requires? ensures? ( ";" | block )
                                {
                                methods=[getQName toString getName setName getTextOffset]
                                stubClass="org.intellij.vala.psi.stub.ValaCreationMethodDeclarationStub"
                                }

parameters ::= parameter ( "," parameter )*
parameter ::= attributes? affiliation? ( "..." | ( "params"? ( "out" | "ref" )? type identifier ( "=" expression )? ) ) {methods=[getName setName getTypeDescriptor]}


throws_declaration ::= "throws" symbol ( "," symbol )*
requires ::= "requires" "(" expression ")" requires?
ensures ::= "ensures" "(" expression ")" ensures?

delegate_declaration ::= access_modifier? delegate_declaration_modifiers? type symbol type_parameters?
                         "(" parameters? ")" throws_declaration? ";"
delegate_declaration_modifiers ::= delegate_declaration_modifier ( " " delegate_declaration_modifier )*
delegate_declaration_modifier ::= "async" | "class" | "extern" | "inline" | "abstract" | "virtual" | "override"
signal_declaration ::= access_modifier? signal_declaration_modifiers? "signal" type identifier
                       "(" parameters? ")" ( ";" | block ) {pin=3}
signal_declaration_modifiers ::= signal_declaration_modifier ( " " signal_declaration_modifier )*
signal_declaration_modifier ::= "async" | "extern" | "inline" | "abstract" | "virtual" | "override" | "new"

method_declaration ::= access_modifier? member_declaration_modifier? type identifier type_parameters?
                       "(" parameters? ")" throws_declaration? requires? ensures? ( ";" | block )  {methods=[getName setName getQName getTypeDescriptor] pin=6}
constant_declaration ::= access_modifier? member_declaration_modifiers? "const" type identifier inline_array_type?
                         ("=" expression )? ";" {pin=3}
field_declaration ::= access_modifier? member_declaration_modifiers? type_weak identifier ( "=" expression )? ";" {methods=[getName setName getQName getTypeDescriptor]}

property_declaration ::= access_modifier? property_declaration_modifiers? type_weak identifier
                         "{" property_declaration_part* "}" {pin=5}

affiliation ::= "owned" | "unowned"

property_declaration_part ::= ( "default" "=" expression ";" ) | property_accessor
property_accessor ::= attributes? access_modifier? affiliation? ( property_get_accessor | property_set_construct_accessor | property_set_accessor)
property_get_accessor ::= "get" ( ";" | block ) {pin=1}
property_set_construct_accessor ::= ( "set" "construct" | "construct" "set" ) ( ";" | block )
property_set_accessor ::=  "set" ( ";" | block )
property_declaration_modifiers ::= property_declaration_modifier ( " " property_declaration_modifier )*
property_declaration_modifier ::= "class" | "static" | "extern" | "inline" | "abstract" | "virtual" | "override" | "new"

tuple ::= "(" expression ( "," expression )* ")"
this_access ::= "this"
base_access ::= "base"
object_or_array_creation_expression ::= "new" (member | built_in_type) ( object_creation_expression | array_creation_expression ) {pin=1}
object_creation_expression ::= "(" ( arguments )? ")" ( object_initializer )?
object_initializer ::= "{" member_initializer ( "," member_initializer )? "}"
member_initializer ::= identifier "=" expression
arguments ::= argument ( "," argument )*
argument ::= "ref" expression | "out" expression | expression | identifier ( ":" expression )?
array_creation_expression ::= ( "[" "]" )* ( "["  array_size? "]" )? ( initializer )?
initializer ::= "{" argument ( "," argument )* "}"

block ::= "{" statement* "}"
statement ::= block
              | ";"
              | if_statement
              | switch_statement
              | while_statement
              | for_statement
              | foreach_statement
              | break_statement
              | continue_statement
              | return_statement
              | yield_statement
              | throw_statement
              | try_statement
              | lock_statement
              | delete_statement
              | local_variable_declarations
              | expression_statement
              | do_statement
{recoverWhile=statement_recovery}
private statement_recovery ::= !("{"|"}"|";"|statement_recovering_keyword|comment|literal|identifier|built_in_type)
private statement_recovering_keyword ::= "if"|"while"|"for"|"foreach"|"class"|"namespace"|"enum"|"struct"|"errordomain"|"do"|"switch"|"case"|"var"|"return"|"this"|"try"
private comment ::= line_comment | block_comment

if_statement ::= "if" "(" expression ")" embedded_statement ( "else" embedded_statement )?  {pin=1}
embedded_statement ::= block | embedded_statement_without_block
embedded_statement_without_block ::= ";"
                                    | if_statement
                                    | switch_statement
                                    | while_statement
                                    | for_statement
                                    | foreach_statement
                                    | break_statement
                                    | continue_statement
                                    | return_statement
                                    | yield_statement
                                    | throw_statement
                                    | try_statement
                                    | lock_statement
                                    | delete_statement
                                    | expression_statement

switch_statement ::= "switch" "(" expression ")" "{" switch_section* "}" {pin=1}
switch_section ::= ( ("case" expression) | "default" ) ":" embedded_statement_without_block*
while_statement ::= "while" "(" expression ")" embedded_statement
do_statement ::= "do" embedded_statement "while" "(" expression ")" ";" {pin=1}
for_statement ::= "for" "("  for_initializer  ";"  expression  ";"  for_iterator  ")" embedded_statement {pin=1}
for_initializer ::= local_variable_declarations | ( statement_expression ( "," statement_expression )* )
for_iterator ::= statement_expression ( "," statement_expression )*
statement_expression ::= expression
foreach_statement ::= "foreach" "(" ( "var" | type) identifier "in" expression ")" embedded_statement {pin=1}
break_statement ::= "break" ";"
continue_statement ::= "continue" ";"
return_statement ::= "return" ( expression )? ";"
yield_statement ::= "yield" ( expression_statement | "return" expression )? ";" {pin=1}
throw_statement ::= "throw" expression ";" {pin=1}
try_statement ::= "try" block catch_clause* finally_clause? {pin=1}
catch_clause ::= "catch" ( "(" type_weak identifier ")" )? block {pin=1}
finally_clause ::= "finally" block {pin=1}
lock_statement ::= "lock" "(" expression ")" embedded_statement {pin=1}
delete_statement ::= "delete" expression ";" {pin=1}

local_variable_declarations ::= ( "var" | type ) local_variable_declaration ( "," local_variable_declaration )*
local_variable_declaration ::= local_tuple_declaration | local_variable {methods=[getTypeDescriptor]}
local_tuple_declaration ::= "(" identifier ( "," identifier )* ")" "=" expression {pin=5}
local_variable ::= identifier ( inline_array_type )? ( "=" expression )? {methods=[getName setName getTypeDescriptor]}
expression_statement ::= statement_expression ";"
type_base ::= (symbol type_arguments? ) | built_in_type
type ::= ( "void" ( "*" )* ) | ( ( "dynamic" )? ( "unowned" )? type_base ( "*" )* ( "?" )? array_type* ) {methods=[getTypeDescriptor]}
type_arguments ::= "<" type ( "," type )* ">"
type_parameters ::= "<" identifier ( "," identifier )* ">"
type_weak ::= ( "void" ( "*" )* ) | ( "dynamic"? ("unowned" | "weak")? type_base ( "*" )* ( "?" )? array_type* ) {methods=[]}
array_type ::= "[" array_size "]" ( "?" )?
array_size ::= expression? ( "," expression? ) *
inline_array_type ::= "[" integer_literal "]"

